#!/usr/bin/env bash

# supress background processes from displaying their exit status upon completion.
# see https://mywiki.wooledge.org/BashFAQ/024
set +m

# see https://dougrichardson.us/notes/fail-fast-bash-scripting.html
set -e
shopt -s inherit_errexit

set -u
set -o pipefail

set -E
set -o functrace

# run the last segment of a pipeline in the current execution process, not a subshell.
# see https://mywiki.wooledge.org/BashFAQ/024
shopt -s lastpipe

# If set, the pattern ‘**’ used in a filename expansion context will match all 
# files and zero or more directories and subdirectories. If the pattern is followed 
# by a ‘/’, only directories and subdirectories match.
shopt -s globstar

# If the extglob shell option is enabled using the shopt builtin, 
# several extended pattern matching operators are recognized. 
shopt -s extglob

# If set, Bash allows filename patterns which match 
# no files to expand to a null string, rather than themselves.
shopt -s nullglob

# enables BASH_ARGC and BASH_ARGV
shopt -s extdebug

# optimization
cli::loader::main() {
    if [[ ! "${1-}" == '---exports' ]]; then
        return
    fi

    local exports_path="$(cd $(dirname $0); pwd)/.cli/loader/exports.sh"

    if [[ ! -f "${exports_path}" || "$0" -nt "${exports_path}" ]]; then
        return
    fi

    echo "${exports_path}"
    exit
}
cli::loader::main "$@"
unset -f cli::loader::main

# lock
[[ ! -v CLI_IFS ]] || cli::assert
readonly CLI_IFS="$IFS"
readonly CLI_LOADER_LOCK="${CLI_LOADER_LOCK-/tmp/.cli_lock}"

# regex
readonly REGEX_NAME="[a-z.][a-z0-9-]*"
readonly CLI_REGEX_NAME="^${REGEX_NAME}$"
readonly CLI_REGEX_BASH_NAME="^[a-z_][a-z0-9_]*$"
readonly CLI_REGEX_PROPERTY_ARG="^(${REGEX_NAME})=(.*)$"
readonly CLI_REGEX_BASH_FUNCTION="^[:a-z_][:a-z0-9_]*$"

readonly CLI_REGEX_VARIABLE_NAME="^[a-z][a-z0-9_]*$"
readonly CLI_REGEX_STRUCT_NAME=${CLI_REGEX_VARIABLE_NAME}
readonly CLI_REGEX_STRUCT_FIELD_NAME=${CLI_REGEX_VARIABLE_NAME}
readonly CLI_REGEX_TYPE_NAME="^(map_of[[:space:]])*[a-z][a-z0-9_]*$"
readonly CLI_REGEX_GLOBAL_NAME="^[A-Z][A-Z0-9_]*$"

readonly -A CLI_LOADER_KNOWN_COMMANDS=(
    ['cli loader']=
    ['cli dsl tokenize']=
    ['cli dsl parse']=
    ['cli dsl meta']=
    ['cli dsl build']=
)

# types
readonly -A CLI_TYPE_CLI_HELP_PARSE=(
    [group]="map_of cli_help_parse_group"
)
readonly -A CLI_TYPE_CLI_HELP_PARSE_GROUP=(
    [alias]="map"
    [type]="map"
    [require]="map"
    [default]="map"
    [regex]="map"
    [allow]="map_of map"
    [positional]="boolean"
)
readonly -A CLI_TYPE_CLI_META_GROUP=(
    [type]="map"
    [require]="map"
    [default]="map"
    [regex]="map"
    [allow]="map_of map"
    [positional]="boolean"
)
readonly -A CLI_TYPE_CLI_META=(
    [alias]="map"
    [group]="map_of cli_meta_group"
    #[attributes]="map_of cli_meta_attributes"
)
readonly -A CLI_TYPE_CLI_META_ATTRIBUTE=(
    [type]="array"
    [blob]="array"
)
readonly -A CLI_TYPE_CLI_META_ATTRIBUTES=(
    [method]="map_of cli_meta_attribute"
)
readonly -A CLI_TYPE_CLI_TOKENS=(
    [id]="array"
    [identifier]="array"
)
readonly -A CLI_TYPE_CLI_ARGS=(
    [path]="array"
    [first_named]="string"
    [named]="map_of array"
    [positional]="array"
)

# tokens
readonly -a CLI_ARG_TOKEN=(
    [0]="PATH"
    [1]="VALUE"
    [2]="DASH"
    [3]="DASH_DASH"
    [4]="DASH_DASH_DASH"
    [5]="END_OPTIONS"
    [6]="EOF"
)
readonly CLI_ARG_TOKEN_PATH="0"
readonly CLI_ARG_TOKEN_VALUE="1"
readonly CLI_ARG_TOKEN_DASH="2"
readonly CLI_ARG_TOKEN_DASH_DASH="3"
readonly CLI_ARG_TOKEN_DASH_DASH_DASH="4"
readonly CLI_ARG_TOKEN_END_OPTIONS="5"
readonly CLI_ARG_TOKEN_EOF="6"

# productions
readonly -a CLI_ARG_PRODUCTION=(
    [0]="SEGMENT"
    [1]="OPTION"
    [2]="POSITIONAL"
)
readonly CLI_ARG_PRODUCTION_SEGMENT="0"
readonly CLI_ARG_PRODUCTION_OPTION="1"
readonly CLI_ARG_PRODUCTION_POSITIONAL="2"

# attributes
declare -A CLI_META_ATTRIBUTES_METHOD=(
    # ['cli::bash::stack::call']=0
    # ['cli::bash::stack::trace']=0
    # ['cli::stderr::assert']=0
    # ['cli::assert']=0
    
    # ['cli::main']=0
    # ['bash::main']=0
    
    # ['cli::trap::err']=0
)
readonly -a CLI_META_ATTRIBUTES_METHOD_0_TYPE=( 'cli_bash_stack_hidden_attribute' )
readonly -a CLI_META_ATTRIBUTES_METHOD_0_BLOB=()

# debug
declare -a CLI_COMMAND_STACK=()
declare CLI_STACK_SHOW_PROCESS
declare CLI_STACK_SHOW_HIDDEN

# frame
declare -A CLI_SCOPE=()

# caches
declare -A CLI_LOADER_CACHE_IMPORTED=()
declare -A CLI_LOADER_CACHE_COVERED=()
declare -A CLI_LOADER_CACHE_SOURCED_PATHS=()

# statics
declare -a CLI_LOADER_CLI_LOADER_IMPORT=()
declare -A CLI_LOADER_CLI_LOADER_INTRINSIC=()

# public
cli::export() {
    cli::loader::emit::variables "$@"
    cli::loader::emit::functions "$@"
}

cli::source() {
    (( $# > 0 )) || cli::assert 'Missing import.'
    
    CLI_IMPORT+=( "$*" )
}

cli::dump() {
    cli::bash::variable::emit "$@"
}

cli::assert() {
    cli::stderr::assert "$@"
}

# loader library
cli::loader::emit::function() {
    local FUNCTION="$1"
    shift

    declare -f "${FUNCTION}"
}

cli::loader::emit::functions() {
    cli::loader::function::list "$@" \
        | while read; do 
            cli::loader::emit::function "${REPLY}"
        done
}

cli::loader::emit::variables() {
    local DECLARE FLAGS VALUE

    cli::loader::variable::list "$@" \
        | while read DECLARE FLAGS VALUE; do
            echo "declare ${FLAGS}g ${VALUE}" 
        done
}

cli::loader::emit::imports() {
    cli::bash::printf 'cli::source %s\n' "$@"
}

cli::loader::emit::inline() {
    local FUNCTION="$1"
    shift
    
    local -n IMPORTS="$1"
    shift

    cli::loader::emit::imports "${IMPORTS[@]}"
    cli::loader::emit::function ${FUNCTION}
}

cli::loader::function::list() {
    local GLOB

    for i in "$@"; do 
        GLOB+="${i}::"
    done
    GLOB+='*'

    cli::bash::function::list "${GLOB}"
}

cli::loader::variable::list() {
    local -u GLOB

    for i in "$@"; do 
        GLOB+="${i^^}_"; 
    done

    cli::dump "${GLOB}*"
}

cli::loader::cache::path() {
    REPLY="${CLI_CACHE}/$1"
}

cli::loader::cache::test() {
    cli::loader::cache::path "$@"
    cli::cache::test "${REPLY}" \
        "${CLI_PATH}" \
        "${CLI_LOADER_CLI_LOADER_SOURCE}"
}

# shim
#   main::prolog
#     import_parent
#     main::dispatch
#       main::invoke CLI_FUNCTION_SELF_TEST
#       main::inline
#         emit::inline CLI_FUNCTION_INLINE
#       main::group CLI_FUNCTION_MAIN
#         main::invoke
#       main::command
#         main::command::known
#           main::command::dispatch ...
#         main::command::load
#         main::command::dispatch
#           main::invoke
#             main::cover [CLI_LOADER_CACHE_COVERED]
#               cli::shim::source
#               $@ ---source
#                 import [CLI_LOADER_CACHE_IMPORTED]
#                   eval function stub() { ... }
#                     backpatch
#                       source::exports
#                       main::cover [CLI_LOADER_CACHE_COVERED]
#                     CLI_FUNCTION $@
#                   import_parent
#                   source::exports
#                       source [CLI_LOADER_CACHE_SOURCED_PATHS]
#             CLI_FUNCTION $@

# loader core
cli::loader::help() {
    cat <<-EOF
		Command
		    ${CLI_COMMAND[@]}
		    
		Summary
		    Loader library.
		EOF
}

cli::loader::help::global() {
    echo
    echo 'Global Arguments'
    echo '    --help -h        [Flag] : Show this message and exit.'
    echo '    --self-test      [Flag] : Runs a self test.'
}

cli::loader::help::extended() {
    cli::loader::help::global
    echo
    echo 'Loader Arguments'
    echo '    ---help          [Flag] : Show extened help.'
    echo '    ---env           [Flag] : Dump script environment variables.'
    echo '    ---imports       [Flag] : List imported libraries.'
    echo '    ---variables     [Flag] : Dump command specific constants.'
    echo '    ---type          [Flag] : Print command type (command, inline, or group).'
    echo '    ---path         [Flag] : Print path to command file.'
    echo '    ---cache-dir         [Flag] : Print path to command cache directory.'
    echo '    ---print         [Flag] : Print command file.'
    echo '    ---source        [Flag] : Source the command as if it were a library.'
    echo '    ---backpatch     [Flag] : ...'
    echo '    ---exports       [Flag] : Print path to library source.'
    echo '    ---dependencies  [Flag] : ....'
    echo '    ---tokenize      [Flag] : ....'
    echo '    ---parse         [Flag] : ....'
    echo '    ---meta          [Flag] : ....'
    echo '    ---load          [Flag] : ....'
    echo '    ---build         [Flag] : ....'
    echo '    ---args-tokenize [Flag] : ....'
    echo '    ---args-load     [Flag] : ....'
    echo '    ---args          [Flag] : ....'
    echo '    ---read          [Flag] : ....'
}

cli::loader::import_parent() {
    local COMMAND=( "${CLI_COMMAND[@]}" )

    # no hierarchy
    if (( ${#COMMAND[@]} < 2 )); then 
        return
    fi

    # group
    if [[ "${COMMAND[@]: -1}" == '.group' ]]; then

        # root has no parent command; (e.g. 'cli .group')
        if (( ${#COMMAND[@]} == 2 )); then 
            return
        fi

        # slice off '.group'; (e.g. 'cli util .group' => 'cli util')
        COMMAND=( "${COMMAND[@]:0:$(( ${#COMMAND[@]}-1 ))}" )
    fi

    # slice off last command and append '.group'
    COMMAND=( "${COMMAND[@]:0:$(( ${#COMMAND[@]}-1 ))}" '.group' )

    if cli::set::test CLI_LOADER_CACHE_IMPORTED "${COMMAND[*]}"; then
        return
    fi

    # check no variables exist that should be imported with this group
    cli::bash::array::pop "${COMMAND[@]}"

    # TODO: expect only the group main function; e.g. cli::args::group::main
    if ! diff <( cli::loader::emit::variables "${MAPFILE[@]}" ) - < /dev/null > /dev/null; then
        echo "Attempt to import '${COMMAND[@]}' but variables already defined:" >&2
        cli::loader::emit::variables "${MAPFILE[@]}" | sed 's/^/  /' >&2
        cli::assert "${MAPFILE[@]}"
    fi

    # import parent
    # echo "${CLI_COMMAND[@]} -> ${COMMAND[@]}" >&2
    "${COMMAND[@]}" ---source
}

cli::loader::backpatch() {

    cli::name::to_inline "${CLI_COMMAND[@]}"
    local INLINE_FUNCTION="${REPLY}"

    cli::bash::function::is_declared "${INLINE_FUNCTION}" \
        || cli::assert "No stub '${INLINE_FUNCTION}' found to backpatch."

    # unset stub
    unset -f "${INLINE_FUNCTION}"

    # backpatch stub
    cli::loader::exports::source

    cli::bash::function::is_declared "${INLINE_FUNCTION}" \
        || cli::assert "Failed to backpatch stub '${INLINE_FUNCTION}'."

    cli::loader::main::cover
}

cli::loader::import() {
    if ! cli::set::deflower CLI_LOADER_CACHE_IMPORTED "${CLI_COMMAND[*]}"; then
        return
    fi

    # loader
    if [[ "${CLI_COMMAND[@]}" == 'cli loader' ]]; then
        return
    fi

    cli::loader::import_parent

    # re-source intrinisic functions to populate loader variables
    if cli::set::test CLI_LOADER_CLI_LOADER_INTRINSIC "${CLI_COMMAND[@]}"; then
        cli::loader::exports::source
        return
    fi

    cli::name::to_inline "${CLI_COMMAND[@]}"
    local FUNCTION=${REPLY}

    # skip if inline function already imported
    if cli::bash::function::is_declared "${FUNCTION}"; then

        # this happens when:
        #   1. two libraries A and B both import inline function I and
        #       A emits the thunk for I and then B goes to emit the same thunk for I
        #   2. recursive calls of an inline function
        return
    fi

    # emit inline stub; inline libraries are constrained to contain only a single function. 
    # This constraint allows for injecting a stub whose name matches the function.
    # The stub, when called, asks the inline library to backpatching itself and then invokes it.
    # Backpatching replaces the stub with the sourced function and covers its imports.
    if [[ ${CLI_TYPE} == inline ]]; then
        eval "${FUNCTION}() { ${CLI_COMMAND[@]} ---backpatch; ${FUNCTION} \"\$@\"; }"
        cli::bash::function::is_declared "${FUNCTION}" || cli::assert
        return
    fi

    # missing group
    if [[ ! -f "${CLI_PATH}" ]]; then
        [[ ${CLI_TYPE} == group ]] || cli::assert
        return
    fi

    # source the import!
    cli::loader::exports::source
}

cli::loader::exports::source() {

    if ! cli::loader::cache::test 'exports.sh'; then 
        ( ${CLI_COMMAND[@]} ---exports > /dev/null )
    fi

    cli::loader::cache::path 'exports.sh'
    cli::loader::source "${REPLY}"
}

cli::loader::source() {
    local SOURCE="$1"
    shift

    if ! cli::set::deflower CLI_LOADER_CACHE_SOURCED_PATHS "${SOURCE}"; then
        return
    fi

    [[ -f "${SOURCE}" ]] || cli::assert "File missing. Cannot source path '${SOURCE}'."
    source "${SOURCE}"
}

cli::loader::probe() {
    local ROOT_DIR="$0"
    [[ -d "${ROOT_DIR}" ]] \
        || cli::assert "BASH_ARGV0 '${ROOT_DIR}' is not a directory."

    local PATHS=()

    local IFS=/
    REPLY="${ROOT_DIR}/${CLI_COMMAND[*]:1}"
    PATHS+=( "${REPLY}" )

    # probe for .sh
    if [[ ! -f "${REPLY}" ]]; then
        REPLY+='.sh'
        PATHS+=( "${REPLY}" )
    fi

    IFS=':'
    [[ -f "${REPLY}" ]] \
        || cli::assert "Failed to find source for '${CLI_COMMAND[@]}'. Searched: '${PATHS[@]}'."
}

cli::loader::shim() {

    # error handling should work before doing anything
    if [[ "${1-}" == ---* ]]; then

        while true; do
            case "$1" in
                '---assert')
                    cli::assert $@;;
                '---assert-subshell')
                    ( cli::assert $@ ) ;;
                '---err')
                    err() { return 1; }; err $@ ;;
                '---err-subshell')
                    err() { return 1; }; ( err $@; ) ;;
                *)
                    break ;;
            esac
            return
        done
    fi

    cli::name::parse "$@"
    shift ${#MAPFILE[@]}

    # CLI_DEPTH (e.g. cli)
    if [[ ! -v CLI_DEPTH ]]; then
        local -i CLI_DEPTH=0
    else
        local -i CLI_DEPTH=$(( CLI_DEPTH + 1 ))
    fi
    
    # CLI_TOOL (e.g. cli)
    local CLI_TOOL="${MAPFILE[0]}"

    # CLI_COMMAND (e.g. cli loader)
    local -n CLI_COMMAND="CLI_COMMAND_${CLI_DEPTH}"
    local -a "CLI_COMMAND_${CLI_DEPTH}"
    CLI_COMMAND=( "${MAPFILE[@]}" )
    readonly CLI_COMMAND
    
    cli::loader::import_parent

    # CLI_SYMBOL (e.g. CLI_LOADER_CLI_LOADER)
    cli::name::to_symbol "${CLI_COMMAND[@]}"
    local -r "CLI_SYMBOL_${CLI_DEPTH}"="CLI_LOADER_${REPLY}"
    local -n CLI_SYMBOL="CLI_SYMBOL_${CLI_DEPTH}"

    # CLI_GROUP (e.g. CLI_LOADER_CLI_LOADER_GROUP=cli)
    local -n CLI_GROUP="${CLI_SYMBOL}_GROUP"
    if [[ ! -v CLI_GROUP ]]; then
        CLI_GROUP="${CLI_COMMAND[@]: 0: $(( ${#CLI_COMMAND[@]} -1 )) }"
        readonly CLI_GROUP
    fi

    # CLI_NAME (e.g. CLI_LOADER_CLI_LOADER_NAME=loader)
    local -n CLI_NAME="${CLI_SYMBOL}_NAME"
    if [[ ! -v CLI_NAME ]]; then
        CLI_NAME=${CLI_COMMAND[@]: -1}
        readonly CLI_NAME
    fi

    # CLI_META (e.g. CLI_LOADER_CLI_LOADER_META)
    local -r "CLI_META_${CLI_DEPTH}"="${CLI_SYMBOL}_META"
    local -n CLI_META="CLI_META_${CLI_DEPTH}"

    # CLI_PATH (e.g. CLI_LOADER_CLI_LOADER_SOURCE=/workspaces/cli/src/loader)
    local -n CLI_PATH="${CLI_SYMBOL}_SOURCE"
    if [[ ! -v CLI_PATH ]]; then
        cli::loader::probe  
        CLI_PATH="${REPLY}"

        # file is executable if it exists
        [[ ! -f "${CLI_PATH}" || -x "${CLI_PATH}" ]] \
            || cli::assert "Source file '${CLI_PATH}' for command '${CLI_COMMAND[*]}' is not executable."
   
        readonly CLI_PATH
    fi

    # CLI_TYPE (e.g. CLI_LOADER_CLI_LOADER_TYPE=command)
    local -n CLI_TYPE="${CLI_SYMBOL}_TYPE"
    local -n CLI_FUNCTION_NAMESPACE="${CLI_SYMBOL}_FUNCTION_NAMESPACE"
    local -n CLI_FUNCTION_MAIN="${CLI_SYMBOL}_FUNCTION_MAIN"
    local -n CLI_FUNCTION_INLINE="${CLI_SYMBOL}_FUNCTION_INLINE"
    local -n CLI_FUNCTION_SELF_TEST="${CLI_SYMBOL}_FUNCTION_SELF_TEST"
    local -n CLI_FUNCTION_HELP="${CLI_SYMBOL}_FUNCTION_HELP"
    if [[ ! -v CLI_TYPE ]]; then

        if [[ ${CLI_NAME} == '.group' ]]; then
            CLI_TYPE=group
            cli::name::to_function ${CLI_GROUP}
            CLI_FUNCTION_NAMESPACE="${REPLY}"
            readonly CLI_FUNCTION_NAMESPACE
        else
            # file exists
            [[ -f "${CLI_PATH}" ]] \
                || cli::assert "Source file '${CLI_PATH}' for command '${CLI_COMMAND[*]}' does not exist."

            cli::name::to_function "${CLI_COMMAND[@]}"
            CLI_FUNCTION_NAMESPACE="${REPLY}"
            readonly CLI_FUNCTION_NAMESPACE

            if [[ "${CLI_PATH}" == *.sh ]]; then
                CLI_TYPE=inline
            else
                CLI_TYPE=command
            fi
        fi

        CLI_FUNCTION_MAIN="${CLI_FUNCTION_NAMESPACE}::main"
        readonly CLI_FUNCTION_MAIN

        CLI_FUNCTION_INLINE="${CLI_FUNCTION_NAMESPACE}"
        readonly CLI_FUNCTION_INLINE

        CLI_FUNCTION_SELF_TEST="${CLI_FUNCTION_NAMESPACE}::self_test"
        readonly CLI_FUNCTION_SELF_TEST
        
        CLI_FUNCTION_HELP="${CLI_FUNCTION_NAMESPACE}::help"
        readonly CLI_FUNCTION_HELP

        readonly CLI_FUNCTION_NAMESPACE
        readonly CLI_TYPE
    fi

    # CLI_CACHE (e.g. CLI_LOADER_CLI_LOADER_CACHE)
    local -n CLI_CACHE="${CLI_SYMBOL}_CACHE"
    if [[ ! -v CLI_CACHE ]]; then
        cli::cache::path "${CLI_PATH}"
        CLI_CACHE="${REPLY}"
        readonly CLI_CACHE
    fi

    if [[ "${1-}" == ---* ]]; then
        while true; do
            case "$1" in
                '---variables')
                    echo "CLI_TOOL=${CLI_TOOL}"
                    echo "CLI_COMMAND=(" "${CLI_COMMAND[@]}" ")"
                    echo "CLI_SYMBOL=${CLI_SYMBOL}"
                    echo "CLI_GROUP=${CLI_GROUP}"
                    echo "CLI_NAME=${CLI_NAME}"
                    echo "CLI_META=${CLI_META}"
                    echo "CLI_TYPE=${CLI_TYPE}"
                    echo "CLI_PATH=${CLI_PATH}"
                    echo "CLI_CACHE=${CLI_CACHE}"
                    echo "CLI_FUNCTION_MAIN=${CLI_FUNCTION_MAIN}"
                    echo "CLI_FUNCTION_INLINE=${CLI_FUNCTION_INLINE}"
                    echo "CLI_FUNCTION_SELF_TEST=${CLI_FUNCTION_SELF_TEST}"
                    echo "CLI_FUNCTION_HELP=${CLI_FUNCTION_HELP}"
                    ;;
                '---tool')
                    echo "${CLI_TOOL}" ;;
                '---command')
                    echo "${CLI_COMMAND[@]}" ;;
                '---name')
                    echo "${CLI_NAME}" ;;
                '---group')
                    echo "${CLI_GROUP}" ;;
                '---type')
                    echo "${CLI_TYPE}" ;;
                '---path') 
                    echo "${CLI_PATH}" ;;
                '---cache-dir')
                    echo "${CLI_CACHE}" ;;
                '---print') 
                    cat "${CLI_PATH}" ;;
                *)
                    break ;;
            esac
            return
        done
    fi
    
    if [[ "${1-}" == ---* ]]; then
        while true; do
            case "$1" in
                '---source')
                    cli::loader::import ;;
                '---backpatch')
                    cli::loader::backpatch ;;
                '---exports')
                    if ! cli::loader::cache::test 'exports.sh'; then 
                        break
                    fi
                    echo "${REPLY}" ;;
                *)
                    break ;;
            esac
            return
        done
    fi

    # establish frame
    # local -A CLI_SCOPE=(
    #     [CLI_TOOL]='string'
    #     [CLI_COMMAND]='array'
    #     [CLI_IMPORT]='array'
    # )

    # stack
    # local -a CLI_COMMAND_STACK=( "${CLI_COMMAND_STACK[@]}" "${CLI_COMMAND[*]}" )

    # CLI_IMPORT
    local -n CLI_IMPORT="${CLI_SYMBOL}_IMPORT"
    if [[ ! -v CLI_IMPORT ]]; then
        declare -ag "${CLI_SYMBOL}_IMPORT+=()"
    fi

    # source the code!
    cli::loader::source "${CLI_PATH}"

    # imports
    if [[ "${1-}" == ---* ]]; then
        while true; do
            case "$1" in
                '---env')
                    declare -p ;;
                '---imports')
                    for i in "${CLI_IMPORT[@]}"; do echo "${i}"; done ;;
                '---exports')
                    ! cli::loader::cache::test 'exports.sh' || cli::assert
                    cli::loader::main::dispatch \
                        | cli::cache::put "${REPLY}"
                    echo "${REPLY}" ;;
                '---dependencies')
                    cli imports -c "${CLI_COMMAND[@]}" ;;
                *) break ;;
            esac 
            return
        done
    fi

    cli::loader::main::dispatch "$@"
}

cli::loader::main::help() {

    # -h anywhere (except after --) prints help and exits
    while (( $# > 0 )); do
        case "$1" in
            '--') 
                break ;;
            '-h') ;& '--help')
                cli::loader::main::invoke ${CLI_FUNCTION_HELP} 
                cli::loader::help::global
                return ;;
            '---help')
                cli::loader::main::invoke ${CLI_FUNCTION_HELP} 
                cli::loader::help::extended
                return ;;
        esac
        shift
    done

    return 1
}

cli::loader::main::dispatch() {
    
    [[ -v CLI_TOOL ]] || cli::assert
    [[ -v CLI_TYPE ]] || cli::assert
    [[ -v CLI_COMMAND ]] || cli::assert

    # help
    if cli::loader::main::help "$@"; then
        return
    fi

    # self test
    if [[ "${1-}" == '--self-test' ]]; then
        cli::loader::main::invoke "${CLI_FUNCTION_SELF_TEST}"
        return
    fi

    # inline
    if [[ "${CLI_TYPE}" == 'inline' ]]; then
        cli::loader::main::inline "$@"

    # group
    elif [[ "${CLI_TYPE}" == 'group' ]]; then
        cli::loader::main::group "$@"

    # command
    else
        [[ "${CLI_TYPE}" == 'command' ]] || cli::assert
        cli::loader::main::command "$@"
    fi
}

cli::loader::main::group() {
    [[ "${CLI_COMMAND[@]: -1}" == '.group' ]] || cli::assert

    if [[ "${1-}" == '-l' ]]; then
        cli::path::dir "${CLI_PATH}"
        cli list --dir "${REPLY}"
        return
    fi

    (( $# == 0 )) \
        || cli::assert "Unexpected arguments passed to '${CLI_COMMAND[*]}': $@"

    if cli::loader::cache::test 'exports.sh'; then 
        cat "${REPLY}"
        return
    fi

    cli::loader::main::invoke "${CLI_FUNCTION_MAIN}" "$@"
}

cli::loader::main::inline() {
    [[ "${CLI_FUNCTION_INLINE}" ]] || cli::assert

    # well-known options that require imports
    if [[ "${1-}" == ---* ]]; then
        while true; do
            case "$1" in
                '---reply')
                    shift
                    cli::loader::main::inline -- "$@"
                    echo "${REPLY-}" ;;
                '---mapfile')
                    shift
                    cli::loader::main::inline -- "$@"
                    for REPLY in "${MAPFILE[@]}"; do
                        echo "${REPLY-}" 
                    done ;;
                '---pipe')
                    shift
                    while read -a MAPFILE; do 
                        cli::loader::main::inline -- "$@" "${MAPFILE[@]}"
                    done ;;
                '---') 
                    break ;;
                *) cli::assert "Unexpected unknown internal option \"$1\" for command '${CLI_COMMAND[*]}'."
            esac 
            return
        done
    fi

    if (( $# > 0 )); then
        if [[ "${1-}" == '--' || "${1-}" == '---' ]]; then
            shift
        fi

        if cli::bash::function::is_declared ${CLI_FUNCTION_MAIN}; then
            cli::loader::main::invoke ${CLI_FUNCTION_MAIN} "$@"
            return
        fi

        cli::loader::main::invoke ${CLI_FUNCTION_INLINE} "$@"
        return
    fi

    # emit dependencies and function
    cli::loader::emit::inline "${CLI_FUNCTION_INLINE}" "CLI_IMPORT"
}

cli::loader::main::command::load() {
    if cli::loader::cache::test 'meta.sh'; then
        cli::loader::source "${REPLY}"
        return
    fi
    local META_SH="${REPLY}"
    
    mkdir -p "${CLI_CACHE}"

    local HELP="${CLI_CACHE}/help"
    local TOKENIZE="${CLI_CACHE}/tokenize"
    local PARSE="${CLI_CACHE}/parse"
    local META="${CLI_CACHE}/meta"
    local LOAD="${CLI_CACHE}/load"

    # file has been touched but check if help changed; if not, use cached meta
    if [[ -f "${META_SH}" && -f "${HELP}" ]] \
        && diff "${HELP}" <( cli::loader::main::dispatch -h ) > /dev/null; then
        cli::loader::source "${META_SH}"
        return
    fi

    cli::loader::main::dispatch -h | \
        ARG_SCOPE=CLI_SCOPE \
        ARG_CLI_DSL_DECLARE_HELP="${HELP}" \
        ARG_CLI_DSL_DECLARE_TOKENIZE="${TOKENIZE}" \
        ARG_CLI_DSL_DECLARE_PARSE="${PARSE}" \
        ARG_CLI_DSL_DECLARE_META="${META}" \
        ARG_CLI_DSL_DECLARE_LOAD="${LOAD}" \
            cli dsl build -- "${CLI_META}" \
                | cli::cache::put "${META_SH}"

    cli::loader::source "${META_SH}"
}

cli::loader::main::command() {

    # parsing
    if [[ "${1-}" == ---* ]]; then
        while true; do
            case "$1" in
                '---tokenize')
                    cli::loader::main::dispatch -h | cli dsl tokenize ;;
                '---parse')
                    ${CLI_COMMAND[@]} ---tokenize | cli dsl parse ;;
                '---meta')
                    ${CLI_COMMAND[@]} ---parse | cli dsl meta ;;
                '---load')
                    ${CLI_COMMAND[@]} ---meta | cli dsl load -- ;;
                '---build')
                    cli::loader::main::dispatch -h \
                        | ARG_SCOPE=CLI_SCOPE cli dsl build -- "${CLI_META}" ;;
                *) break ;;
            esac 
            return
        done
    fi

    if cli::set::test CLI_LOADER_KNOWN_COMMANDS "${CLI_COMMAND[*]}"; then
        cli::loader::main::command::known "$@"
        return
    fi

    cli::loader::main::command::load

    ARG_SCOPE=CLI_SCOPE \
        cli::core::parse "$@"
    local CLI_META_GROUP=${REPLY}

    # declare locals for group
    local -A CLI_SCOPE_LAST=()
    local -n CLI_META_GROUP_TYPE=${CLI_META_GROUP}_TYPE
    for REPLY in ${!CLI_META_GROUP_TYPE[@]}; do

        # variable name
        local NAME=${REPLY}
        cli::name::to_symbol ${NAME}
        local VARIABLE="ARG_${REPLY}"

        # variable flags
        local TYPE="${CLI_META_GROUP_TYPE[${NAME}]}"
        cli::core::type::to_bash ${TYPE}
        local FLAGS="${REPLY}"

        # declare variable
        local -${FLAGS} ${VARIABLE}
        
        # prolog
        CLI_SCOPE_LAST[${VARIABLE}]=CLI_SCOPE[${VARIABLE}]
        CLI_SCOPE[${VARIABLE}]="${TYPE}"

        # initialize variable
        if cli::set::test REPLY_CLI_PARSE_ARGS_NAMED ${NAME}; then
            local -n VARIABLE_REF=${VARIABLE}
            local -n VALUE_REF="REPLY_CLI_PARSE_ARGS_NAMED_${REPLY_CLI_PARSE_ARGS_NAMED[${NAME}]}"
            case ${TYPE} in
                'array') VARIABLE_REF=( "${VALUE_REF[@]}" ) ;;
                'map')
                    local PAIR
                    for PAIR in "${VALUE_REF[@]}"; do
                        VARIABLE_REF[${PAIR%%=*}]="${PAIR#*=}"
                    done
                    ;;
                *) VARIABLE_REF="${VALUE_REF}" ;;
            esac
        else
            # default value
            ARG_SCOPE=CLI_SCOPE \
                cli::core::variable::initialize ${VARIABLE}
        fi

        # declare -p ${VARIABLE} >&2
    done
    unset TYPE NAME VARIABLE FLAGS PAIR
    unset -n VARIABLE_REF VALUE_REF

    # cli::dump 'REPLY_CLI_PARSE_ARGS_*' >&2

    cli::loader::main::command::dispatch "${REPLY_CLI_PARSE_ARGS_POSITIONAL[@]}"

    # epilog
    for REPLY in ${!CLI_SCOPE_LAST[@]}; do
        CLI_SCOPE[${REPLY}]=CLI_SCOPE_LAST[${REPLY}]
    done
}

cli::loader::main::command::known() {
    ARG_HELP=false
    ARG_SELF_TEST=false

    if (( $# > 0 )); then
        [[ ! "${CLI_COMMAND[*]}" == 'cli loader' ]] \
            || cli::assert "Command 'cli loader' takes no arguments."

        # if any arguments, then arguments are positional
        [[ "$1" == '--' ]] \
            || cli::assert "Known command '${CLI_COMMAND[@]}' cannot have named arguments."
        shift
    fi

    cli::loader::main::command::dispatch "$@"
}

cli::loader::main::command::dispatch() {

    # well-known options that require loaded arguments
    while [[ "${1-}" == ---* ]]; do
        case "$1" in
            '---args-tokenize')
                ;; # cli ::write CLI_TOKENS ;;
            '---args-load')
                ;; # cli ::write CLI_ARGS ;;
            '---args')
                cli::dump 'ARG_*' ;;
            '---read')
                shift
                while read -a REPLY; do ${CLI_FUNCTION_MAIN} "$@" "${REPLY[@]}"; done ;;
            *) cli::stderr::fail "Unexpected unknown internal option \"$1\"."
        esac 
        return
    done

    # well known features
    if [[ -n "${ARG_RUN_AS-}" ]] \
        && [[ ! "${ARG_RUN_AS}" == "$(whoami)" ]]; then
        arg_user="${ARG_RUN_AS}" \
        arg_command="$0" \
            cli::run_as "$@"
        return
    fi

    cli::loader::main::invoke ${CLI_FUNCTION_MAIN} "$@"
}

cli::loader::main::cover() {
    if ! cli::set::deflower CLI_LOADER_CACHE_COVERED "${CLI_COMMAND[*]}"; then
        return
    fi

    for REPLY in "${CLI_IMPORT[@]}"; do
        set ${REPLY}

        cli::shim::source "$1" \
            || cli::assert "Failed to find shim '$1' for import of '$*'."

        # echo "cover ${CLI_COMMAND[*]}: $@ ---source" >&2
        "$@" ---source
    done
}

cli::loader::main::invoke() {
    local CLI_FUNCTION="$1"
    shift

    cli::bash::function::is_declared ${CLI_FUNCTION} \
        || cli::assert "Command '${CLI_COMMAND[@]}' missing entrypoint '${CLI_FUNCTION}'."

    cli::loader::main::cover

    ${CLI_FUNCTION} "$@"
}

cli::loader::main() {
    echo "set -$-"
    echo

    declare -p CLI_IFS
    echo declare -gx LC_ALL=POSIX
    echo

    shopt -p | sort -k2 -k3
    echo

    # cli::loader::emit::variables cli | sort -k4
    {
        (
            CLI_COMMAND_STACK=()
            CLI_SCOPE=()

            declare -p CLI_COMMAND_STACK
            declare -p CLI_SCOPE
        )
        declare -p CLI_LOADER_CACHE_IMPORTED
        declare -p CLI_LOADER_KNOWN_COMMANDS
        declare -p CLI_LOADER_CACHE_COVERED
        declare -p CLI_LOADER_LOCK

        declare -p CLI_LOADER_CACHE_SOURCED_PATHS
        declare -p CLI_LOADER_CLI_LOADER_INTRINSIC
        declare -p CLI_LOADER_CLI_LOADER_SOURCE
        declare -p CLI_LOADER_CLI_LOADER_IMPORT

        cli::loader::emit::variables cli core
        cli::loader::emit::variables cli regex
        cli::loader::emit::variables cli known
        cli::loader::emit::variables cli type
        cli::loader::emit::variables cli bgen
        cli::loader::emit::variables cli arg
        cli::loader::emit::variables cli meta attributes

    } | sort -k2 -k3
    echo

    echo '# TOC of cli::*'
    cli::loader::function::list cli | sed 's/^/# /'
    echo 

    cli::loader::emit::functions cli
    echo

    trap -p
    echo

    declare -p CLI_LOADER_SHIM_ROOT_CLI
    declare -f cli
    echo
}

cli::loader::self_test() (
    cli loader ---exports
)

cli::loader::main::imports() {
    # harvest imported inline functions by searching functions for
    # calls to function that are not already defiend. Print the imports. 
    # For example, a call to cli::foo_bar would be printed as "cli foo-bar".

    local FUNCTIONS_REGEX=$(
        declare -F \
            | egrep 'cli::' \
            | awk '{ print $3 }' \
            | paste -s -d'|'
    )

    declare -F \
        | egrep 'cli::' \
        | awk '{ print $3 }' \
        | while read; do declare -f "${REPLY}"; done \
        | egrep -o 'cli(::[0-9a-z_]+)+' \
        | sort -u \
        | egrep -v "${FUNCTIONS_REGEX}" \
        | sed 's/::/ /g' \
        | sed 's/_/-/g'
}

cli::loader::main::shim() {
    trap 'cli::stderr::on_err $?' ERR

    # source The Shim using an absolute path
    source "$( cd $(dirname ${BASH_SOURCE}); cd ..; pwd)/cli"

    # root directory of cli commands
    local ROOT_DIR="$( cd $(dirname ${BASH_SOURCE}); pwd)"

    # harvest imports
    mapfile -t CLI_LOADER_CLI_LOADER_IMPORT < <(cli::loader::main::imports)

    # list of dependencies
    local -a DEPENDENCY=( "${CLI_LOADER_CLI_LOADER_IMPORT[@]}" )

    # source transitive set of dependencies (prune "cli core")
    local -i INDEX
    for (( INDEX=0; INDEX<${#DEPENDENCY[@]}; INDEX++ )); do
        local COMMAND="${DEPENDENCY[${INDEX}]}"
        # echo "${COMMAND}" >&2

        if [[ "${COMMAND}" =~ 'cli core' ]]; then
            continue
        fi
        CLI_LOADER_CLI_LOADER_INTRINSIC["${COMMAND}"]=true

        # bind
        local SEGMENTS=( ${COMMAND} )
        IFS='/'
        local SOURCE="${ROOT_DIR}/${SEGMENTS[*]:1}.sh"
        IFS="${CLI_IFS}"

        # source
        local -a CLI_IMPORT=()
        source "${SOURCE}"

        # add dependencies of dependencies that have not already been imported
        local IMPORT
        for IMPORT in "${CLI_IMPORT[@]}"; do
            if grep -qv "${IMPORT}"; then
                DEPENDENCY+=( "${IMPORT}" )
                # echo "${COMMAND} -> ${IMPORT}"
            fi < <(declare -p DEPENDENCY)
        done
    done

    # load loader
    CLI_LOADER_CACHE_SOURCED_PATHS['/workspaces/cli/src/loader']=true
    CLI_LOADER_CACHE_IMPORTED["cli .group"]=true
    cli loader ---source

    # reimport intrinsic dependencies to populate loader data structures
    local COMMAND
    for COMMAND in "${!CLI_LOADER_CLI_LOADER_INTRINSIC[@]}"; do
        ${COMMAND} ---source
    done

    # loader imports are all inline and have three functions: main, help, self_test
    # importing an linine function only imports the main function so unset the others
    while read; do
        unset -f "${REPLY}"
    done < <(
        declare -F \
            | egrep -v 'cli::loader::main::help' \
            | egrep -v 'cli::loader::help' \
            | egrep -v 'cli::loader::self_test' \
            | egrep '(help|self_test)$' \
            | awk '{ print $3 }'
    )

    cli loader "$@"
}

cli::loader::main::shim "$@"
